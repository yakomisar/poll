version: '3.9'
services:
  app:
    container_name: golang_container
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - DATABASE_HOST=${DB_HOST}
      - DATABASE_PORT=${DB_PORT}
      - TEST_POSTGRES_USER=${TEST_DB_USER}
      - TEST_POSTGRES_PASSWORD=${TEST_DB_PASSWORD}
      - TEST_POSTGRES_DB=${TEST_DB_NAME}
      - TEST_DATABASE_HOST=${TEST_DB_HOST}
      - TEST_DATABASE_PORT=${TEST_DB_PORT}
    tty: true
    build: .
    ports:
      - 8000:8080
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      postgresdb:
        condition: service_healthy
    networks:
      - learning

  postgresdb:
    image: postgres:latest
    container_name: postgres_container
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - DATABASE_HOST=${DB_HOST}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - '5432:5432'
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    networks:
      - learning

#  postgresdb_test:
#    image: postgres:latest
#    container_name: postgres_test_container
#    environment:
#      - POSTGRES_USER=${TEST_DB_USER}
#      - POSTGRES_PASSWORD=${TEST_DB_PASSWORD}
#      - POSTGRES_DB=${TEST_DB_NAME}
#      - DATABASE_HOST=${TEST_DB_HOST}
#    ports:
#      - '4568:5432'
#    volumes:
#      - ./pg_data_test:/var/lib/postgresql/data
#    networks:
#      - learning

volumes:
  pg_data:
#  pg_data_test:

# Networks to be created to facilitate communication between containers
networks:
  learning:
    driver: bridge

#version: "3.8"
#
#services:
#  db:
#    image: postgres
#    container_name: postgres
#    restart: always
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    volumes:
#      - ./db-data:/var/lib/postgresql/data
#    environment:
#      - POSTGRES_USER=test
#      - POSTGRES_PASSWORD=123456789t
#      - POSTGRES_DB=poll_service
#    ports:
#      - 5432:5432
#
#  backend:
#    container_name: backend-dev
#    image: backend-dev
#    build:
#      # Контекст для сборки образа,
#      # в данном случае, текущая директория
#      context: .
#      # название Dockerfile для сборки
#      target: development
#    volumes:
#      - .:/backend
#    depends_on:
#      db:
#        condition: service_healthy
#    ports:
#      - 8080:8080